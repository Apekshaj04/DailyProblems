class Solution {
    public static int find(int x, int[] parent) {
        if (x != parent[x]) {
            parent[x] = find(parent[x], parent);
        }
        return parent[x];
    }

    public static void union(int x, int y, int[] parent, int[] size) {
        int parentX = find(x, parent);
        int parentY = find(y, parent);
        if (parentX == parentY) return;

        if (size[parentX] < size[parentY]) {
            parent[parentX] = parentY;
            size[parentY] += size[parentX];
        } else {
            parent[parentY] = parentX;
            size[parentX] += size[parentY];
        }
    }

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int n = graph.length;
        int[] parent = new int[n];
        int[] size = new int[n];

        for (int i = 0; i < n; i++) {
            parent[i] = i;
            size[i] = 1;
        }

        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (graph[i][j] == 1) {
                    union(i, j, parent, size);
                }
            }
        }

        int[] infected = new int[n];
        for (int node : initial) {
            int root = find(node, parent);
            infected[root]++;
        }

        // Sort initial to handle tie-breaking by smaller index
        Arrays.sort(initial);
        int maxSaved = -1, result = initial[0];

        for (int node : initial) {
            int root = find(node, parent);
            if (infected[root] == 1) {
                if (size[root] > maxSaved) {
                    maxSaved = size[root];
                    result = node;
                }
            }
        }

        return result;
    }
}
